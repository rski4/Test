load("~/Desktop/Divergent Growth/ssa22-g22.csv")
install.packages("shiny")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages('shiny')
devtools::install_github("shiny", "rstudio")
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages('shiny')
library(shiny)
install.packages('shiny')
library(shiny)
install.packages('shiny')
library(shiny)
library(shiny)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(shiny)
library(shiny)
library('shiny')
packages.update('shiny')
require(RCurl)
require(plyr)
require(stringr)
#### Play by Play Data ####
play17 = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/events2017.csv"))
play17$Year = 2017
play18 = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/events2018.csv"))
play18$Year = 2018
play=rbind(play17, play18)
# Get Rid of NA #
play = play[!is.na(play$pitcher),]
play$runner_on_1st_dest[is.na(play$runner_on_1st_dest)]=0
play$runner_on_2nd_dest[is.na(play$runner_on_2nd_dest)]=0
play$runner_on_3rd_dest[is.na(play$runner_on_3rd_dest)]=0
play$batter_dest[is.na(play$batter_dest)]=0
#### Run Expectancy Matrix ####
# Game ID #
play$gameID=with(play, paste(date,start,home_team))
# Runs in Inning #
play$RUNS=with(play, home_score + vis_score)
# Half Inning Unique Identifier #
play$half.inning=with(play, paste(gameID,inning,batting_team))
# Runs Scored on each play #
play$runs.scored=with(play, as.numeric((batter_dest==4)) +
as.numeric((runner_on_1st_dest==4)) +
as.numeric((runner_on_2nd_dest==4)) +
as.numeric((runner_on_3rd_dest==4)))
# Replace NAs w/ 0 #
play$runs.scored[is.na(play$runs.scored)]=0
# Runs Scored in each half inning #
runs.scored.inning=aggregate(play$runs.scored,
list(half.inning=play$half.inning), sum)
# Runs at beginning of each half inning #
runs.scored.start=aggregate(play$RUNS,
list(half.inning=play$half.inning), "[",1)
# data frame with maximum runs scored
MAX= data.frame(half.inning=runs.scored.start$half.inning)
MAX$x=runs.scored.inning$x + runs.scored.start$x
play=merge(play,MAX)
N=ncol(play)
names(play)[N]="max.runs"
# Runs rest of inning #
play$run.roi = with(play, max.runs - RUNS)
# Runner states as binary 0,1 #
runner1=ifelse(as.character(play[,"first_runner"])=="",0,1)
runner2=ifelse(as.character(play[,"second_runner"])=="",0,1)
runner3=ifelse(as.character(play[,"third_runner"])=="",0,1)
# Find state #
get.state = function(runner1,runner2,runner3,outs){
runners = paste(runner1, runner2, runner3, sep="")
paste(runners,outs)
}
play$state = get.state(runner1, runner2, runner3, play$outs)
# Runner Out states after play #
nrunner1 = with(play, as.numeric(runner_on_1st_dest == 1 | batter_dest == 1))
nrunner2 = with(play, as.numeric(runner_on_1st_dest == 2 | runner_on_2nd_dest == 2 |
batter_dest == 2))
nrunner3 = with(play, as.numeric(runner_on_1st_dest == 3 | runner_on_2nd_dest == 3 |
runner_on_3rd_dest == 3 | batter_dest == 3))
nouts = with(play, outs + outs_on_play)
play$new.state = get.state(nrunner1,nrunner2,nrunner3,nouts)
play = subset(play, (state != new.state) | (runs.scored > 0))
# Take only half innings where 3 outs made #
data.outs = ddply(play, .(half.inning), summarize,
outs.inning = sum(outs_on_play))
play = merge(play, data.outs)
playc = subset(play, outs.inning == 3)
# Average runs to end of inning by state #
runs=with(playc, aggregate(run.roi, list(state), mean))
runs$Outs = substr(runs$Group, 5, 5)
runs = runs[order(runs$Outs),]
runs.out = matrix(round(runs$x, 2), 8, 3)
dimnames(runs.out)[[2]] = c("0 outs", "1 out", "2 outs")
dimnames(runs.out)[[1]] = c("000","001","010","011","100","101","110","111")
base.out.re = as.data.frame(runs.out)
base.out.re$Base = rownames(base.out.re)
base.out.re = base.out.re[,c("Base", "0 outs", "1 out", "2 outs")]
#### Run Value of Events ####
# Add 3 outs which will have run value of 0 #
runs.potential = matrix(c(runs$x, rep(0,8)), 32, 1)
dimnames(runs.potential)[[1]] = c(runs$Group.1, "000 3", "001 3",
"010 3", "011 3", "100 3", "101 3",
"110 3", "111 3")
# Find Run Expectancy before play #
play$runs.state = runs.potential[play$state,]
# Run Expectancy After #
play$new.state <- gsub(' 4', ' 3', play$new.state) #Get rid of 4
play$runs.new.state = runs.potential[play$new.state,]
# Run Value #
play$runs.value = with(play, runs.new.state - runs.state + runs.scored)
# Run Value by Event #
rv = ddply(play, .(event_type), summarise,
Run.Value = mean(runs.value),
N = length(runs.value))
rv
# Run Value for Player #
rv.player = ddply(play, .(batter, Year), summarise,
Runs.Created = round(sum(runs.value), digits = 2),
Runs.Start = round(mean(runs.state), digits = 2),
Runs.End = round(mean(runs.new.state), digits = 2),
Avg.Runs = round(mean(runs.scored), digits = 2),
N = length(runs.value))
player.team = as.data.frame(unique(play[c("batter_last_name", "batting_team")]))
teams.home = as.data.frame(unique(play["home_team"]))
colnames(teams.home) = "Team"
teams.away = as.data.frame(unique(play["visiting_team"]))
colnames(teams.away) = "Team"
teams = merge(teams.home, teams.away, all.x = T, all.y = T)
require(RCurl)
install.packages("RCurl")
install.packages("plyr")
install.packages("stringr")
require(RCurl)
require(plyr)
require(stringr)
#### Play by Play Data ####
play17 = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/events2017.csv"))
play17$Year = 2017
play18 = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/events2018.csv"))
play18$Year = 2018
play=rbind(play17, play18)
# Get Rid of NA #
play = play[!is.na(play$pitcher),]
play$runner_on_1st_dest[is.na(play$runner_on_1st_dest)]=0
play$runner_on_2nd_dest[is.na(play$runner_on_2nd_dest)]=0
play$runner_on_3rd_dest[is.na(play$runner_on_3rd_dest)]=0
play$batter_dest[is.na(play$batter_dest)]=0
#### Run Expectancy Matrix ####
# Game ID #
play$gameID=with(play, paste(date,start,home_team))
# Runs in Inning #
play$RUNS=with(play, home_score + vis_score)
# Half Inning Unique Identifier #
play$half.inning=with(play, paste(gameID,inning,batting_team))
# Runs Scored on each play #
play$runs.scored=with(play, as.numeric((batter_dest==4)) +
as.numeric((runner_on_1st_dest==4)) +
as.numeric((runner_on_2nd_dest==4)) +
as.numeric((runner_on_3rd_dest==4)))
# Replace NAs w/ 0 #
play$runs.scored[is.na(play$runs.scored)]=0
# Runs Scored in each half inning #
runs.scored.inning=aggregate(play$runs.scored,
list(half.inning=play$half.inning), sum)
# Runs at beginning of each half inning #
runs.scored.start=aggregate(play$RUNS,
list(half.inning=play$half.inning), "[",1)
# data frame with maximum runs scored
MAX= data.frame(half.inning=runs.scored.start$half.inning)
MAX$x=runs.scored.inning$x + runs.scored.start$x
play=merge(play,MAX)
N=ncol(play)
names(play)[N]="max.runs"
# Runs rest of inning #
play$run.roi = with(play, max.runs - RUNS)
# Runner states as binary 0,1 #
runner1=ifelse(as.character(play[,"first_runner"])=="",0,1)
runner2=ifelse(as.character(play[,"second_runner"])=="",0,1)
runner3=ifelse(as.character(play[,"third_runner"])=="",0,1)
# Find state #
get.state = function(runner1,runner2,runner3,outs){
runners = paste(runner1, runner2, runner3, sep="")
paste(runners,outs)
}
play$state = get.state(runner1, runner2, runner3, play$outs)
# Runner Out states after play #
nrunner1 = with(play, as.numeric(runner_on_1st_dest == 1 | batter_dest == 1))
nrunner2 = with(play, as.numeric(runner_on_1st_dest == 2 | runner_on_2nd_dest == 2 |
batter_dest == 2))
nrunner3 = with(play, as.numeric(runner_on_1st_dest == 3 | runner_on_2nd_dest == 3 |
runner_on_3rd_dest == 3 | batter_dest == 3))
nouts = with(play, outs + outs_on_play)
play$new.state = get.state(nrunner1,nrunner2,nrunner3,nouts)
play = subset(play, (state != new.state) | (runs.scored > 0))
# Take only half innings where 3 outs made #
data.outs = ddply(play, .(half.inning), summarize,
outs.inning = sum(outs_on_play))
play = merge(play, data.outs)
playc = subset(play, outs.inning == 3)
# Average runs to end of inning by state #
runs=with(playc, aggregate(run.roi, list(state), mean))
runs$Outs = substr(runs$Group, 5, 5)
runs = runs[order(runs$Outs),]
runs.out = matrix(round(runs$x, 2), 8, 3)
dimnames(runs.out)[[2]] = c("0 outs", "1 out", "2 outs")
dimnames(runs.out)[[1]] = c("000","001","010","011","100","101","110","111")
base.out.re = as.data.frame(runs.out)
base.out.re$Base = rownames(base.out.re)
base.out.re = base.out.re[,c("Base", "0 outs", "1 out", "2 outs")]
#### Run Value of Events ####
# Add 3 outs which will have run value of 0 #
runs.potential = matrix(c(runs$x, rep(0,8)), 32, 1)
dimnames(runs.potential)[[1]] = c(runs$Group.1, "000 3", "001 3",
"010 3", "011 3", "100 3", "101 3",
"110 3", "111 3")
# Find Run Expectancy before play #
play$runs.state = runs.potential[play$state,]
# Run Expectancy After #
play$new.state <- gsub(' 4', ' 3', play$new.state) #Get rid of 4
play$runs.new.state = runs.potential[play$new.state,]
# Run Value #
play$runs.value = with(play, runs.new.state - runs.state + runs.scored)
# Run Value by Event #
rv = ddply(play, .(event_type), summarise,
Run.Value = mean(runs.value),
N = length(runs.value))
rv
# Run Value for Player #
rv.player = ddply(play, .(batter, Year), summarise,
Runs.Created = round(sum(runs.value), digits = 2),
Runs.Start = round(mean(runs.state), digits = 2),
Runs.End = round(mean(runs.new.state), digits = 2),
Avg.Runs = round(mean(runs.scored), digits = 2),
N = length(runs.value))
player.team = as.data.frame(unique(play[c("batter_last_name", "batting_team")]))
teams.home = as.data.frame(unique(play["home_team"]))
colnames(teams.home) = "Team"
teams.away = as.data.frame(unique(play["visiting_team"]))
colnames(teams.away) = "Team"
teams = merge(teams.home, teams.away, all.x = T, all.y = T)
install.packages('DT')
install.packages('shinythemes')
install.packages('shinyWidgets')
library(shiny)
library(DT)
library(shinythemes)
library(shinyWidgets)
require(RCurl)
ui <- navbarPage("IIAC Fangraphs",
setBackgroundColor(rgb(178,34,34,200, maxColorValue = 255)),
selected = "Home",
tabPanel("Home",
tags$h1("Blog"),
tags$p("Blog will go here")
),
navbarMenu("Batting",
tabPanel("Standard", dataTableOutput("Batting.Stats.Standard")),
tabPanel("Advanced", dataTableOutput("Batting.Stats.Advanced"))
),
navbarMenu("Pitching",
tabPanel("Standard"),
tabPanel("Advanced")
),
navbarMenu("Team",
tabPanel("Standard"),
tabPanel("Advanced"),
tabPanel("Spray Charts"),
tabPanel("Base Runners"),
tabPanel("Out"),
tabPanel("Count")
),
navbarMenu("IIAC",
tabPanel("Run Expectancy", fluidRow(
tableOutput("Run.Expectancy"), align = "center"),
tags$head(tags$style("table {background-color: ghostwhite; }", media="screen", type="text/css"))
),
tabPanel("Run Values", tableOutput("Run.Expectancy.Event"),
tags$head(tags$style("table {background-color: ghostwhite; }", media="screen", type="text/css"))),
tabPanel("Inning"),
tabPanel("Win Probability"),
tabPanel("Park Factors")
),
navbarMenu("Player",
tabPanel("Spray Charts"),
tabPanel("Base Runners"),
tabPanel("Out"),
tabPanel("Count")
),
tabPanel("Glossary")
)
ind.bat = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/IIAC%20Bat%20Ind.csv"))
server <- function(input, output) {
output$Blog = renderText({print("Blog will go here")})
output$Batting.Stats.Standard <- renderDataTable(
ind.bat[order(ind.bat$year, decreasing = TRUE),],
filter = 'top',
rownames = FALSE,
options = list(pageLength = 50, autoWidth = TRUE)
)
output$Batting.Stats.Advanced <- renderDataTable(
rv.player[order(rv.player$Runs.Created, decreasing = TRUE),],
filter = 'top',
rownames = FALSE,
options = list(autoWidth = TRUE)
)
output$Run.Expectancy.Event <- renderTable({
rv  },
hover = TRUE,
spacing = 'l'
)
output$Run.Expectancy <- renderTable({
base.out.re[order(base.out.re$`0 outs`, decreasing = FALSE),]},
hover = TRUE,
spacing = 'l'
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(DT)
library(shinythemes)
library(shinyWidgets)
require(RCurl)
ui <- navbarPage("IIAC Fangraphs",
setBackgroundColor(rgb(178,34,34,200, maxColorValue = 255)),
selected = "Home",
tabPanel("Home",
tags$h1("Blog"),
tags$p("Blog will go here")
),
navbarMenu("Batting",
tabPanel("Standard", dataTableOutput("Batting.Stats.Standard")),
tabPanel("Advanced", dataTableOutput("Batting.Stats.Advanced"))
),
navbarMenu("Pitching",
tabPanel("Standard"),
tabPanel("Advanced")
),
navbarMenu("Team",
tabPanel("Standard"),
tabPanel("Advanced"),
tabPanel("Spray Charts"),
tabPanel("Base Runners"),
tabPanel("Out"),
tabPanel("Count")
),
navbarMenu("IIAC",
tabPanel("Run Expectancy", fluidRow(
tableOutput("Run.Expectancy"), align = "center"),
tags$head(tags$style("table {background-color: ghostwhite; }", media="screen", type="text/css"))
),
tabPanel("Run Values", tableOutput("Run.Expectancy.Event"),
tags$head(tags$style("table {background-color: ghostwhite; }", media="screen", type="text/css"))),
tabPanel("Inning"),
tabPanel("Win Probability"),
tabPanel("Park Factors")
),
navbarMenu("Player",
tabPanel("Spray Charts"),
tabPanel("Base Runners"),
tabPanel("Out"),
tabPanel("Count")
),
tabPanel("Glossary")
)
ind.bat = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/IIAC%20Bat%20Ind.csv"))
server <- function(input, output) {
output$Blog = renderText({print("Blog will go here")})
output$Batting.Stats.Standard <- renderDataTable(
ind.bat[order(ind.bat$year, decreasing = TRUE),],
filter = 'top',
rownames = FALSE,
options = list(pageLength = 50, autoWidth = TRUE)
)
output$Batting.Stats.Advanced <- renderDataTable(
rv.player[order(rv.player$Runs.Created, decreasing = TRUE),],
filter = 'top',
rownames = FALSE,
options = list(autoWidth = TRUE)
)
output$Run.Expectancy.Event <- renderTable({
rv  },
hover = TRUE,
spacing = 'l'
)
output$Run.Expectancy <- renderTable({
base.out.re[order(base.out.re$`0 outs`, decreasing = FALSE),]},
hover = TRUE,
spacing = 'l'
)
}
shinyApp(ui = ui, server = server)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("shiny")
library(shiny); runApp('Desktop/Baseball Analytics/Fangraphs.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
runApp('Desktop/Test/Fangraphs2.R')
rm(list=ls())
setwd("~/Desktop/Baseball Analytics/IIAC")
#install.packages('dplyr')
library(plyr)
library(dplyr)
library(reshape2)
library(RCurl)
#install.packages('xlsx')
#install.packages('rJava')
#install.packages('openxlsx')
library(openxlsx)
library(rJava)
library(xlsx)
pitch <- read.csv("IIACIndPitching.csv")
pitching <- subset(pitch, year != "2014")
teamPitching = read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/IIAC%20Team%20Pitching.csv"))
#teampitching <- read.csv(text = getURL("https://raw.githubusercontent.com/rski4/Test/master/IIAC%20Team%20Pitching.csv"))
pitching$k.9 = pitching$so / 9
pitching$bb.9 = pitching$bb / 9
#Rate Stats
pitching$k.rate = with(pitching, (so/ab) * 100) #K-Rate
pitching$bb.rate = with(pitching, (bb/ab) * 100) #BB-Rate
#BABIP
pitching$BABIP = ((pitching$h-pitching$hr)/(pitching$ab-pitching$so - pitching$hr))
pitching[is.na(pitching)]<-0
pitch.weights=lm(ra~hr+bb+so, data=teamPitching)
summary(pitch.weights)
View(pitching)
View(pitching)
pitching$FIP.raw=with(pitching, (coef(summary(pitch.weights))[2]*hr+coef(summary(pitch.weights))[3]*(bb+hbp)+coef(summary(pitch.weights))[4]*so)*9/(ip))
avg.year=ddply(subset(pitching,year>=2000),.(year), summarize,
avg.FIP.raw=(coef(summary(pitch.weights))[2]*mean(hr)+
coef(summary(pitch.weights))[3]*mean(bb+hbp)+
coef(summary(pitch.weights))[4]*mean(so))*9/mean(ip),
avg.ERA=mean(er)*9/(mean(ip)))
View(pitching)
pitchingIIAC <- merge(subset(pitching,year>=2000),avg.year,by="year", all.x=TRUE)
View(pitchingIIAC)
pitchingIIAC$FIP=with(pitchingIIAC, FIP.raw/(avg.ERA-avg.FIP.raw))
View(pitchingIIAC)
#out <- capture.output(summary(pitchingIIAC))
#cat("pitchingIIAC", out, file="pitchingIIAC.csv", sep="n", append=TRUE)
write.csv(pitchingIIAC, 'IIACpitching.advtest.csv', na="")
View(pitchingIIAC)
View(pitching)
#out <- capture.output(summary(pitchingIIAC))
#cat("pitchingIIAC", out, file="pitchingIIAC.csv", sep="n", append=TRUE)
pitchingIIAC <- subset(pitchingIIAC, select=c("player", "teamID", "ip",	"era",	"k.9", "bb.9",	"k.rate",	"bb.rate",	"BABIP",	"FIP", "year"))
write.csv(pitchingIIAC, 'IIACpitching.advtest.csv', na="", rownames=FALSE)
#out <- capture.output(summary(pitchingIIAC))
#cat("pitchingIIAC", out, file="pitchingIIAC.csv", sep="n", append=TRUE)
pitchingIIAC <- subset(pitchingIIAC, select=c("player","teamID","ip","era","k.9", "bb.9","k.rate","bb.rate","BABIP","FIP","year"))
write.csv(pitchingIIAC, 'IIACpitching.advtest.csv', na="", rownames=FALSE)
View(pitchingIIAC)
#out <- capture.output(summary(pitchingIIAC))
#cat("pitchingIIAC", out, file="pitchingIIAC.csv", sep="n", append=TRUE)
pitchingIIAC <- subset(pitchingIIAC, select=("player","teamID","ip","era","k.9", "bb.9","k.rate","bb.rate","BABIP","FIP","year"))
#out <- capture.output(summary(pitchingIIAC))
#cat("pitchingIIAC", out, file="pitchingIIAC.csv", sep="n", append=TRUE)
pitchingIIAC <- subset(pitchingIIAC, select=c("player","teamID","ip","era","k.9", "bb.9","k.rate","bb.rate","BABIP","FIP","year"))
#out <- capture.output(summary(pitchingIIAC))
#cat("pitchingIIAC", out, file="pitchingIIAC.csv", sep="n", append=TRUE)
pitchingIIAC <- subset(pitchingIIAC, select=c("Player","teamID","ip","era","k.9", "bb.9","k.rate","bb.rate","BABIP","FIP","year"))
View(pitchingIIAC)
write.csv(pitchingIIAC, 'IIACpitching.advtest.csv', na="", rownames=FALSE)
write.csv(pitchingIIAC, 'IIACpitching.advtest.csv', na="", row.names=FALSE)
write.csv(pitchingIIAC, 'IIACpitching.adv.csv', na="", row.names=FALSE)
write.csv(pitchingIIAC, 'IIACpitching.adv.csv', na="", row.names=FALSE)
runApp('~/Desktop/Test/Fangraphs2.R')
runApp('~/Desktop/Test/Fangraphs2.R')
